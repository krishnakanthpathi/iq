// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int       @id @default(autoincrement())
  password        String
  email           String    @unique
  name            String
  iq_rating       Int  
  tags            String[]
  problems_solved Problem[]
  doubts          Doubt[]   @relation("UserCreatedDoubts")
  picked_doubts   Doubt[]   @relation("UserPickedDoubts")
}

model Problem {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String
  tags        String[]
  doubts      Doubt[]
  user_id     Int?
  user        User?     @relation(fields: [user_id],references: [id])
}

model Doubt {
  id           Int      @id @default(autoincrement())
  query        String
  author_id    Int
  picker_id    Int?
  problem_id   Int
  resolved     Boolean  @default(false)
  // When multiple foreign keys reference the same table, we need named relatations.
  // here picked_id and problem_id are the foreign keys.
  created_by   User     @relation(name: "UserCreatedDoubts",fields: [author_id],references: [id])  
  picked_by    User?    @relation(name: "UserPickedDoubts",fields: [picker_id],references: [id])  
  problem      Problem  @relation(fields: [problem_id],references: [id])   
}